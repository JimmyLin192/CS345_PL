Result = 4
parse([var, x, ';', x, '<-', '(', 5, +, '(', 2, -, 3, ')', ')', ';', return, x, '.'], AST), evaluate(AST, Result).
parse([var, x, ';', x, '<-', '(', 5, +, 2, -, 3, ')', ';', return, x, '.'], AST), evaluate(AST, Result).

parse([return, '(', 5, -, 2, +, 2, ')', '.'], AST), evaluate(AST, Res).

parse([return, '(', 5, -, 2, +, 2, -, 1, +, 10, ')', '.'], AST), evaluate(AST, Res).

Result = 4
parse(['var' ,'y' ,';' ,'y' ,'<-' ,'(' ,2 ,'*' ,4 ,'/' ,4 ,'+' ,1 ,')' ,';' ,'var' ,'x' ,'<-' ,'(' ,'y' ,'*' ,2 ,')' ,';' ,'x' ,'<-' ,2 ,';' ,'var' ,'z' ,'<-' ,'(' ,'y' ,'+' ,'x' ,'/' ,2 ,')' ,';' ,'return' ,'(' ,'z' ,')' ,'.' ], AST), evaluate(AST, Result).

Result = 8
parse(['var' ,'x' ,'<-' ,2 ,';' ,'x' ,'<-' ,'(' ,'x' ,'+' ,2 ,')' ,';' ,'x' ,'<-' ,'(' ,3 ,'*' ,'x' ,')' ,';' ,'x' ,'<-' ,'(' ,'x' ,'/' ,6 ,'*' ,4 ,')' ,';' ,'return' ,'x' ,'.' ], AST), evaluate(AST, Result).

Result = -3
parse(['var' ,'x' ,'<-' ,2 ,';' ,'x' ,'<-' ,'(' ,'x' ,'+' ,2 ,')' ,';' ,'x' ,'<-' ,'(' ,3 ,'*' ,'x' ,')' ,';' ,'x' ,'<-' ,'(' ,'x' ,'/' ,6 ,'*' ,4 ,')' ,';' ,'var' ,'y' ,';' ,'y' ,'<-' ,'(' ,'(' ,3 ,'-' ,'x' ,')' ,'+' ,'(' ,1 ,'+' ,1 ,')' ,')' ,';' ,'return' ,'y' ,'.' ], AST), evaluate(AST, Result).

Result  = -.25
parse(['var' ,'x' ,'<-' ,'(' ,'(' ,3 ,'-' ,1 ,')' ,'+' ,'(' ,1 ,'+' ,1 ,')' ,'-' ,'(' ,3 ,'/' ,4 ,'+' ,'(' ,2 ,'+' ,6 ,'/' ,4 ,')' ,')' ,')' ,';' ,'return' ,'x' ,'.' ], AST), evaluate(AST, Result).

Result = -46
parse(['var' ,'x' ,'<-' ,'(' ,3 ,'*' ,2 ,'-' ,4 ,')' ,';' ,'var' ,'y' ,'<-' ,'(' ,5 ,'+' ,6 ,'/' ,2 ,')' ,';' ,'var' ,'z' ,'<-' ,'(' ,3 ,'*' ,4 ,'/' ,2 ,')' ,';' ,'return' ,'(' ,'x' ,'-' ,'y' ,'*' ,'z' ,')' ,'.' ], AST), evaluate(AST, Result).

Result = -0.6153846153846154
parse(['var' ,'x' ,'<-' ,'(' ,3 ,'*' ,2 ,'*' ,4 ,')' ,';' ,'var' ,'y' ,'<-' ,'(' ,5 ,'+' ,6 ,'+' ,2 ,')' ,';' ,'var' ,'z' ,'<-' ,'(' ,3 ,'-' ,4 ,'-' ,2 ,')' ,';' ,'return' ,'(' ,'x' ,'/' ,'y' ,'/' ,'z' ,')' ,'.' ], AST), evaluate(AST, Result).

should fail:
parse(['var' ,'return' ,'<-' ,1 ,';' ,'return' ,'(' ,'return' ,')' ,'.' ], AST), evaluate(AST, Result).
parse(['var' ,'var' ,'<-' ,1 ,';' ,'return' ,'(' ,'var' ,')' ,'.' ], AST), evaluate(AST, Result).
parse(['var' ,'<-' ,'<-' ,1 ,';' ,'return' ,'(' ,'<-' ,')' ,'.' ], AST), evaluate(AST, Result).

--------------------------------------------------------------------------------------------------
HW03:
// if then: testing logOp and comparators
parse(['var', 'x', ';', 'x', '<-', -1, ';', 'if', '(', 'x', '!=', 0, ')', 'then', 'x', '<-', 10, '.', 'endif', ';', 'return', 'x', '.'], AST).
parse(['var', 'x', ';', 'x', '<-', 1, ';', 'if', '(', 'x', '==', 0, ')', 'then', 'x', '<-', 10, '.', 'endif', ';', 'return', 'x', '.'], AST).
parse(['var', 'x', ';', 'x', '<-', 1, ';', 'if', '(', '(', 'x', '<', 0, '&&', 'x', '>', 1, ')', ')', 'then', 'x', '<-', 10, '.', 'endif', ';', 'return', 'x', '.'], AST).
parse(['var', 'x', ';', 'x', '<-', 1, ';', 'if', '(', '(', '(', 'x', '<=', 0, '&&', 'x', '>=', 1,')', '||', 'x', '==', 1, ')', ')', 'then', 'x', '<-', 10, '.', 'endif', ';', 'return', 'x', '.'], AST).

// if then else
parse(['var', 'x', ';', 'x', '<-', 1, ';', 'if', '(', 'x', '<', 0, ')', 'then', 'x', '<-', 10, '.', 'else', 'x', '<-', 20, '.', 'endif', ';', 'return', 'x', '.'], AST).

parse(['var', 'x', '<-', 5, ';', 'var', 'out', ';', 'if', '(', 'x', '<', 3, ')', 'then', 'out', '<-', 1, '.', 'else', 'out', '<-', 0, '.', 'endif', ';', 'return', 'out', '.'],AST).

parse(['var', 'x', '<-', 5, ';', 'var', 'out', ';', 'if', '(', 'x', '<=', 3, ')', 'then', 'out', '<-', 1, '.', 'endif', ';', 'return', 'out', '.'],AST).

parse(['var', 'x', '<-', 5, ';', 'var', 'out', ';', 'if', '(', 'x', '==', 5, ')', 'then', 'out', '<-', 1, '.', 'endif', ';', 'return', 'out', '.'],AST).

parse(['var', 'x', '<-', 5, ';', 'var', 'out', ';', 'if', '(', 'x', '>=', 3, ')', 'then', 'out', '<-', 1, '.', 'else', 'out', '<-', 0, '.', 'endif', ';', 'return', 'out', '.'],AST).




// while
parse(['var', 'x', ';', 'x', '<-', 1, ';', 'while', '(', 'x', '<', 0, ')', 'do', 'x', '<-', 10, '.', 'done', ';', 'return', 'x', '.'], AST).
parse(['var', 'x', ';', 'x', '<-', 1, ';', 'while', '(', 'x', '<', 0, ')', 'do', 'x', '<-', 10, '.', 'done', ';', 'x', '<-', 20,  ';', 'return', 'x', '.'], AST).


// function definition
parse(['function', 'f', '(', 'x', ')', '{', 'return', 'x', '.', '}', ';', 'return', 'f', '(', '(', 10, '+', 1, ')', ')', '.'], AST).

// all combo
parse(['function', 'f', '(', 'x', ')', '{', 'while', '(', 'x', '<', 0, ')', 'do', 'x', '<-', 10, '.', 'done', ';','return', 'x', '.', '}', ';', 'return', 'f', '(', '(', 10, '+', 1, ')', ')', '.'], AST).
